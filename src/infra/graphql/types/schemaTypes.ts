/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  BadgeInfo: { // root type
    description?: string | null; // String
    id?: string | null; // ID
    imageUrl?: string | null; // String
    name?: string | null; // String
  }
  Query: {};
  Question: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    isDraft: boolean; // Boolean!
    title: string; // String!
  }
  Reference: { // root type
    id: string; // ID!
    title: string; // String!
    url: string; // String!
  }
  Student: { // root type
    badgesCount?: number | null; // Int
    bio?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    leaderBoardPosition?: number | null; // Int
    password: string; // String!
    questionsCount?: number | null; // Int
    stuukesCount?: number | null; // Int
    username: string; // String!
  }
  StudentBadge: { // root type
    badgeId: string; // String!
    earnedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Stuuke: { // root type
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    isDraft: boolean; // Boolean!
    title: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  BadgeInfo: { // field return type
    description: string | null; // String
    id: string | null; // ID
    imageUrl: string | null; // String
    name: string | null; // String
  }
  Query: { // field return type
    allStudents: Array<NexusGenRootTypes['Student'] | null> | null; // [Student]
  }
  Question: { // field return type
    author: NexusGenRootTypes['Student']; // Student!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    isDraft: boolean; // Boolean!
    stuukes: NexusGenRootTypes['Stuuke']; // Stuuke!
    title: string; // String!
  }
  Reference: { // field return type
    id: string; // ID!
    stuuke: NexusGenRootTypes['Stuuke']; // Stuuke!
    title: string; // String!
    url: string; // String!
  }
  Student: { // field return type
    badges: Array<NexusGenRootTypes['StudentBadge'] | null> | null; // [StudentBadge]
    badgesCount: number | null; // Int
    bio: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: string; // ID!
    lastName: string; // String!
    leaderBoardPosition: number | null; // Int
    password: string; // String!
    questions: Array<NexusGenRootTypes['Question'] | null> | null; // [Question]
    questionsCount: number | null; // Int
    stuukes: Array<NexusGenRootTypes['Stuuke'] | null> | null; // [Stuuke]
    stuukesCount: number | null; // Int
    username: string; // String!
  }
  StudentBadge: { // field return type
    badgeId: string; // String!
    badgeInfo: NexusGenRootTypes['BadgeInfo'] | null; // BadgeInfo
    earnedAt: NexusGenScalars['DateTime']; // DateTime!
    student: NexusGenRootTypes['Student'] | null; // Student
  }
  Stuuke: { // field return type
    author: NexusGenRootTypes['Student']; // Student!
    content: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    isDraft: boolean; // Boolean!
    question: NexusGenRootTypes['Question']; // Question!
    references: Array<NexusGenRootTypes['Reference'] | null> | null; // [Reference]
    title: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  BadgeInfo: { // field return type name
    description: 'String'
    id: 'ID'
    imageUrl: 'String'
    name: 'String'
  }
  Query: { // field return type name
    allStudents: 'Student'
  }
  Question: { // field return type name
    author: 'Student'
    content: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    isDraft: 'Boolean'
    stuukes: 'Stuuke'
    title: 'String'
  }
  Reference: { // field return type name
    id: 'ID'
    stuuke: 'Stuuke'
    title: 'String'
    url: 'String'
  }
  Student: { // field return type name
    badges: 'StudentBadge'
    badgesCount: 'Int'
    bio: 'String'
    email: 'String'
    firstName: 'String'
    id: 'ID'
    lastName: 'String'
    leaderBoardPosition: 'Int'
    password: 'String'
    questions: 'Question'
    questionsCount: 'Int'
    stuukes: 'Stuuke'
    stuukesCount: 'Int'
    username: 'String'
  }
  StudentBadge: { // field return type name
    badgeId: 'String'
    badgeInfo: 'BadgeInfo'
    earnedAt: 'DateTime'
    student: 'Student'
  }
  Stuuke: { // field return type name
    author: 'Student'
    content: 'String'
    createdAt: 'DateTime'
    id: 'ID'
    isDraft: 'Boolean'
    question: 'Question'
    references: 'Reference'
    title: 'String'
  }
}

export interface NexusGenArgTypes {
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}