generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./ERD.svg"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Student {
  id             String          @id
  firstName      String
  lastName       String
  username       String          @unique
  email          String          @unique
  password       String
  bio            String?
  // badges         StudentBadges?
  // badgesCount    Int             @default(0)
  points         Int             @default(0)
  stuukes        Stuuke[]
  stuukesCount   Int             @default(0)
  questions      Question[]
  questionsCount Int             @default(0)
  // notifications  StudentNotification[]
  courses        StudentCourse[]

  @@map("student")
}

// model StudentPoints {
//   points    Int     @default(0)
//   semester  Int
//   year      Int
//   student   Student @relation(fields: [studentId], references: [id])
//   studentId String  @id

//   @@index([semester, year, studentId], name: "points_semester_year_idx")
//   @@map("studentPoints")
// }

// model StudentBadges {
//   earnedAt  DateTime
//   student   Student  @relation(fields: [studentId], references: [id])
//   studentId String   @id
//   badge     Badge?   @relation(fields: [badgeId], references: [id])
//   badgeId   String?

//   @@map("studentBadges")
// }

// model Badge {
//   id            String          @id
//   name          String
//   description   String
//   studentBadges StudentBadges[]

//   @@map("badge")
// }

// model StudentNotification {
//   id        String  @id @default(uuid())
//   title     String
//   message   String
//   student   Student @relation(fields: [studentId], references: [id])
//   studentId String

//   @@map("studentNotification")
// }

model Question {
  id        String        @id
  title     String
  content   String
  createdAt DateTime
  student   Student       @relation(fields: [studentId], references: [id])
  studentId String
  stuukes   Stuuke[]
  isDraft   Boolean       @default(true)
  tags      TagsOnPosts[]
  course    Course        @relation(fields: [courseId], references: [id])
  courseId  String

  @@map("question")
}

model StudentCourse {
  id        String  @id
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  @@map("studentCourse")
}

model Course {
  id          String          @id
  title       String
  description String
  question    Question[]
  student     StudentCourse[]
  stuuke      Stuuke[]

  @@map("course")
}

model Tag {
  id          String        @id
  title       String
  description String
  question    TagsOnPosts[]

  @@map("tag")
}

model TagsOnPosts {
  id         String   @id
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
  stuuke     Stuuke?  @relation(fields: [stuukeId], references: [id])
  stuukeId   String?
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      String

  @@map("tagsOnPosts")
}

model Stuuke {
  id         String             @id
  title      String
  content    String
  createdAt  DateTime
  references StuukeReferences[]
  student    Student            @relation(fields: [studentId], references: [id])
  studentId  String
  question   Question           @relation(fields: [questionId], references: [id])
  questionId String
  isDraft    Boolean            @default(true)
  tags       TagsOnPosts[]
  course     Course             @relation(fields: [courseId], references: [id])
  courseId   String

  @@map("stuuke")
}

model StuukeReferences {
  id       String @id
  title    String
  url      String
  stuuke   Stuuke @relation(fields: [stuukeId], references: [id])
  stuukeId String

  @@map("stuukeReferences")
}
